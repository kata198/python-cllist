* cllist-1.2.0 - ??? ?? ????

- Some documentation cleanups

- Add "findnode" and "rfindnode" methods to dllist and sllist. These operate the same as "index" and "rindex", but instead of returning the index they return the nodes themselves.

- On dllist, "insert" method can now take a value as the optional second argument (insert before node) as oppose to always requiring a node object. This simplifies what formerly required:

  dl.insert(value, dl.nodeat( dl.index( beforeThisValue) ) )

- On sllist, "insertbefore" and "insertafter" methods now can take a value as the optional second argument as oppose to always requiring a node object.

- Add "insertbefore" as an alias of "insert" for dllist

- Implement "insertafter" method of dllist

- Add "insert" as an alias for "insertbefore" for llist. Now llist and dllist share a common "insert" interface

* cllist-1.1.0 - Jun 18 2017

- Fixup the "docs" target
- Fixup the "sphinx" docs, including adding some of the new methods and implementations, and also noting about my much-improved dllist impl, which has a worst-case O( n/4 ) and average-case O( n/8 ) complexity on all non-O(1) operations.
- Minor improvements to passing around optimization options in Makefile


* cllist-1.0.3 - Jun 18 2017

- Some cleanups in the build process


* cllist-1.0 - Apr 12 2017

  Forked from python-llist to python-cllist

  Work by Tim Savannah:

    - Implement pop(idx) to pop any given index
    - Implement "contains" sequence method, so the "in" operator doesn't run the whole list multiple times
    - Implement "index" and "rindex" methods to return an index/rindex
    - Remove "last_accessed_idx" and "last_accessed" node from dllist, replace with "middle" which is used when
        the list size exceeds a certain value (defined as 10). This greatly improves random-access and random-pop performance
        on dllist to be comprable or better to that of a base python list
    - Remove the "hash" function, which did NOT generate unique hashes (very easy to construct two linked lists with same hash,
        such as [1, 5, 7] and [5, 1, 7]   or [2, 1] and [3]
    - Remove all compiler warnings
    - Add some basic benchmarks
    - Add some more tests
    - Some minor cleanups

    - Move types into headers, make generic LList node and list structures, which are common to both double and single linked lists.
    - Allow a double-linked list to extend with a single-linked list, and a single-linked list to extend with a double (for much higher performance)

    - Implement mappings on sllist and dllist
    - Implement slicing (including with step) on both sllist and dllist

    - Add __version__ and __version_tuple__

    - Some general optimizations


* llist-0.4 (2013-01-01)

  - Python 3.x support

-----------------------------------------------------------------------

* llist-0.3 (2012-01-22)

  - fixed neighbour references (prev and next) in dangling nodes
  - implemented clear() method in dllist and sllist
  - implemented rotate() method in dllist and sllist
  - fixed reference counting of list weakrefs
  - fixed segmentation fault when removing a node that does not belong
    to the list (issue #1)
  - implemented extend(), extendleft() and extendright() methods in
    dllist and sllist
  - changed insert_before() to insertbefore() and insert_after() to
    insertafter()

-----------------------------------------------------------------------

* llist-0.2 (2011-12-30)

  - subscript operator `lst[x]` now directly returns values stored
    in the list, not dllistnode objects
  - implemented nodeat() method in dllist and sllist
  - fixed segmentation faults in sllist.insert and sllist.delete
    methods
  - added missing Py_DECREFs to sllist
  - added concatenation and in-place concatenation operator
  - added repeat operator
  - added hash() support

-----------------------------------------------------------------------

* llist-0.1 (2011-12-26)

  Initial release
